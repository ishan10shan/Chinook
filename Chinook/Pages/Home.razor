@page "/"
@attribute [Authorize]

@using Chinook.Models
@using Microsoft.EntityFrameworkCore

<PageTitle>Index</PageTitle>

<div class="row">
    <div class="col-8">
        <h1>Artists</h1>
    </div>
    <div class="col-4">
        <SearchArtist ArtistList="Artists"
                      OnSearch="UpdateFilteredArtist"
                      OnClearFilter="() => UpdateFilteredArtist(string.Empty)"></SearchArtist>
    </div>
</div>

@if (Artists == null)
{
    <Loading />
}
else if (FilteredArtists.Count == 0)
{
    <p>No records available to display</p>
}
else
{
    <table class="table table-striped table-hover table-sm">
        <thead>
            <tr>
                <th>Name</th>
                <th>Number of albums</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var artist in FilteredArtists)
            {
                <tr>
                    <td><a href="Artist/@artist.ArtistId">@artist.Name</a></td>
                    <td>@artist.Albums.Count()</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Artist> Artists;
    private List<Artist> FilteredArtists;
    [Inject] IDbContextFactory<ChinookContext> DbFactory { get; set; }

    protected override async Task OnInitializedAsync() {
        await InvokeAsync(StateHasChanged);
        Artists = await GetArtists();
        FilteredArtists = Artists;
    }

    public async Task<List<Artist>> GetArtists()
    {   
        var dbContext = await DbFactory.CreateDbContextAsync();
        var users = dbContext.Users.Include(a => a.UserPlaylists).ToList();

        dbContext.Artists.ToList()
            .ForEach(x => x.Albums = GetAlbumsForArtist((int)x.ArtistId).Result);
        return dbContext.Artists.ToList();
    }

    public async Task<List<Album>> GetAlbumsForArtist(int artistId)
    {
        var dbContext = await DbFactory.CreateDbContextAsync();
        return dbContext.Albums.Where(a => a.ArtistId == artistId).ToList();
    }

    public void UpdateFilteredArtist(string searchTerm)
    {
        if (string.IsNullOrEmpty(searchTerm))
        {
            FilteredArtists = Artists;
        }
        else
        {
            FilteredArtists = Artists.Where(x => x.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
        }
    }
}
